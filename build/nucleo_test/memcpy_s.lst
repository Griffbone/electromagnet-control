ARM GAS  /tmp/ccvQIB6i.s 			page 1


   1              		.cpu cortex-m7
   2              		.arch armv7e-m
   3              		.fpu fpv5-d16
   4              		.eabi_attribute 28, 1
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.file	"memcpy_s.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.file 1 "src/low_level/memcpy_s.c"
  19              		.section	.text.memcpy_s,"ax",%progbits
  20              		.align	1
  21              		.global	memcpy_s
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	memcpy_s:
  27              	.LVL0:
  28              	.LFB3:
   1:src/low_level/memcpy_s.c **** #include "memcpy_s.h"
   2:src/low_level/memcpy_s.c **** 
   3:src/low_level/memcpy_s.c **** memcpy_s_err_t memcpy_s(void* dest, size_t destsz, const void* src, size_t count) {
  29              		.loc 1 3 83 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
   4:src/low_level/memcpy_s.c ****     memcpy_s_err_t error = MEMCPY_S_OK;
  33              		.loc 1 4 5 view .LVU1
   5:src/low_level/memcpy_s.c **** 
   6:src/low_level/memcpy_s.c ****     // Check if either destination or source pointers are NULL
   7:src/low_level/memcpy_s.c ****     if (dest == NULL || src == NULL) {
  34              		.loc 1 7 5 view .LVU2
  35              		.loc 1 7 8 is_stmt 0 view .LVU3
  36 0000 002A     		cmp	r2, #0
  37 0002 18BF     		it	ne
  38 0004 0028     		cmpne	r0, #0
  39 0006 1AD0     		beq	.L5
   3:src/low_level/memcpy_s.c ****     memcpy_s_err_t error = MEMCPY_S_OK;
  40              		.loc 1 3 83 view .LVU4
  41 0008 08B5     		push	{r3, lr}
  42              	.LCFI0:
  43              		.cfi_def_cfa_offset 8
  44              		.cfi_offset 3, -8
  45              		.cfi_offset 14, -4
  46 000a 8446     		mov	ip, r0
  47 000c 9646     		mov	lr, r2
   8:src/low_level/memcpy_s.c ****         error = MEMCPY_S_NULL_POINTER;
   9:src/low_level/memcpy_s.c ****     }
  10:src/low_level/memcpy_s.c ****     // Check if count or destination size is zero
ARM GAS  /tmp/ccvQIB6i.s 			page 2


  11:src/low_level/memcpy_s.c ****     else if (count == 0 || destsz == 0) {
  48              		.loc 1 11 10 is_stmt 1 view .LVU5
  49              		.loc 1 11 13 is_stmt 0 view .LVU6
  50 000e 0029     		cmp	r1, #0
  51 0010 18BF     		it	ne
  52 0012 002B     		cmpne	r3, #0
  53 0014 15D0     		beq	.L6
  12:src/low_level/memcpy_s.c ****         error = MEMCPY_S_SIZE_OVERFLOW;
  13:src/low_level/memcpy_s.c ****     }
  14:src/low_level/memcpy_s.c ****     // Check if count is greater than destination size
  15:src/low_level/memcpy_s.c ****     else if (count > destsz) {
  54              		.loc 1 15 10 is_stmt 1 view .LVU7
  55              		.loc 1 15 13 is_stmt 0 view .LVU8
  56 0016 8B42     		cmp	r3, r1
  57 0018 15D8     		bhi	.L7
  16:src/low_level/memcpy_s.c ****         error = MEMCPY_S_SIZE_OVERFLOW;
  17:src/low_level/memcpy_s.c ****     }
  18:src/low_level/memcpy_s.c ****     // Check for overlap between source and destination
  19:src/low_level/memcpy_s.c ****     else if ((dest < src && (char*)dest + count > (char*)src) ||
  58              		.loc 1 19 10 is_stmt 1 view .LVU9
  59              		.loc 1 19 13 is_stmt 0 view .LVU10
  60 001a 9042     		cmp	r0, r2
  61 001c 02D2     		bcs	.L3
  62              		.loc 1 19 41 discriminator 1 view .LVU11
  63 001e C218     		adds	r2, r0, r3
  64              	.LVL1:
  65              		.loc 1 19 26 discriminator 1 view .LVU12
  66 0020 7245     		cmp	r2, lr
  67 0022 12D8     		bhi	.L8
  68              	.L3:
  69              		.loc 1 19 63 discriminator 3 view .LVU13
  70 0024 F445     		cmp	ip, lr
  71 0026 03D9     		bls	.L4
  20:src/low_level/memcpy_s.c ****              (src < dest && (char*)src + count > (char*)dest)) {
  72              		.loc 1 20 40 view .LVU14
  73 0028 0EEB0302 		add	r2, lr, r3
  74              		.loc 1 20 26 view .LVU15
  75 002c 6245     		cmp	r2, ip
  76 002e 0ED8     		bhi	.L9
  77              	.L4:
  21:src/low_level/memcpy_s.c ****         error = MEMCPY_S_OVERLAP_DETECTED;
  22:src/low_level/memcpy_s.c ****     }
  23:src/low_level/memcpy_s.c ****     else {
  24:src/low_level/memcpy_s.c ****         // Perform the memory copy
  25:src/low_level/memcpy_s.c ****         memcpy(dest, src, count);
  78              		.loc 1 25 9 is_stmt 1 view .LVU16
  79 0030 1A46     		mov	r2, r3
  80 0032 7146     		mov	r1, lr
  81              	.LVL2:
  82              		.loc 1 25 9 is_stmt 0 view .LVU17
  83 0034 6046     		mov	r0, ip
  84              	.LVL3:
  85              		.loc 1 25 9 view .LVU18
  86 0036 FFF7FEFF 		bl	memcpy
  87              	.LVL4:
   4:src/low_level/memcpy_s.c **** 
  88              		.loc 1 4 20 view .LVU19
ARM GAS  /tmp/ccvQIB6i.s 			page 3


  89 003a 0020     		movs	r0, #0
  90 003c 02E0     		b	.L2
  91              	.LVL5:
  92              	.L5:
  93              	.LCFI1:
  94              		.cfi_def_cfa_offset 0
  95              		.cfi_restore 3
  96              		.cfi_restore 14
   8:src/low_level/memcpy_s.c ****     }
  97              		.loc 1 8 15 view .LVU20
  98 003e 0120     		movs	r0, #1
  99              	.LVL6:
  26:src/low_level/memcpy_s.c ****     }
  27:src/low_level/memcpy_s.c **** 
  28:src/low_level/memcpy_s.c ****     return error;
 100              		.loc 1 28 5 is_stmt 1 view .LVU21
  29:src/low_level/memcpy_s.c **** }
 101              		.loc 1 29 1 is_stmt 0 view .LVU22
 102 0040 7047     		bx	lr
 103              	.LVL7:
 104              	.L6:
 105              	.LCFI2:
 106              		.cfi_def_cfa_offset 8
 107              		.cfi_offset 3, -8
 108              		.cfi_offset 14, -4
  12:src/low_level/memcpy_s.c ****     }
 109              		.loc 1 12 15 view .LVU23
 110 0042 0220     		movs	r0, #2
 111              	.LVL8:
 112              	.L2:
  28:src/low_level/memcpy_s.c **** }
 113              		.loc 1 28 5 is_stmt 1 view .LVU24
 114              		.loc 1 29 1 is_stmt 0 view .LVU25
 115 0044 08BD     		pop	{r3, pc}
 116              	.LVL9:
 117              	.L7:
  16:src/low_level/memcpy_s.c ****     }
 118              		.loc 1 16 15 view .LVU26
 119 0046 0220     		movs	r0, #2
 120              	.LVL10:
  16:src/low_level/memcpy_s.c ****     }
 121              		.loc 1 16 15 view .LVU27
 122 0048 FCE7     		b	.L2
 123              	.LVL11:
 124              	.L8:
  21:src/low_level/memcpy_s.c ****     }
 125              		.loc 1 21 15 view .LVU28
 126 004a 0320     		movs	r0, #3
 127              	.LVL12:
  21:src/low_level/memcpy_s.c ****     }
 128              		.loc 1 21 15 view .LVU29
 129 004c FAE7     		b	.L2
 130              	.LVL13:
 131              	.L9:
  21:src/low_level/memcpy_s.c ****     }
 132              		.loc 1 21 15 view .LVU30
 133 004e 0320     		movs	r0, #3
ARM GAS  /tmp/ccvQIB6i.s 			page 4


 134              	.LVL14:
  21:src/low_level/memcpy_s.c ****     }
 135              		.loc 1 21 15 view .LVU31
 136 0050 F8E7     		b	.L2
 137              		.cfi_endproc
 138              	.LFE3:
 140              		.section	.text.fill_array,"ax",%progbits
 141              		.align	1
 142              		.global	fill_array
 143              		.syntax unified
 144              		.thumb
 145              		.thumb_func
 147              	fill_array:
 148              	.LVL15:
 149              	.LFB4:
  30:src/low_level/memcpy_s.c **** 
  31:src/low_level/memcpy_s.c **** void fill_array(void *array, const void *value, size_t count, const size_t element_size) {
 150              		.loc 1 31 90 is_stmt 1 view -0
 151              		.cfi_startproc
 152              		@ args = 0, pretend = 0, frame = 0
 153              		@ frame_needed = 0, uses_anonymous_args = 0
 154              		.loc 1 31 90 is_stmt 0 view .LVU33
 155 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 156              	.LCFI3:
 157              		.cfi_def_cfa_offset 24
 158              		.cfi_offset 4, -24
 159              		.cfi_offset 5, -20
 160              		.cfi_offset 6, -16
 161              		.cfi_offset 7, -12
 162              		.cfi_offset 8, -8
 163              		.cfi_offset 14, -4
 164 0004 8046     		mov	r8, r0
 165 0006 0F46     		mov	r7, r1
 166 0008 1646     		mov	r6, r2
 167 000a 1D46     		mov	r5, r3
  32:src/low_level/memcpy_s.c ****   char *ptr = (char *)array; // Use byte-wise pointer arithmetic
 168              		.loc 1 32 3 is_stmt 1 view .LVU34
 169              	.LVL16:
  33:src/low_level/memcpy_s.c ****   for (size_t i = 0; i < count; i++) {
 170              		.loc 1 33 3 view .LVU35
 171              	.LBB2:
 172              		.loc 1 33 8 view .LVU36
 173              		.loc 1 33 15 is_stmt 0 view .LVU37
 174 000c 0024     		movs	r4, #0
 175              		.loc 1 33 3 view .LVU38
 176 000e 06E0     		b	.L15
 177              	.LVL17:
 178              	.L16:
  34:src/low_level/memcpy_s.c ****     memcpy(ptr + i * element_size, value, element_size);
 179              		.loc 1 34 5 is_stmt 1 discriminator 3 view .LVU39
 180 0010 2A46     		mov	r2, r5
 181 0012 3946     		mov	r1, r7
 182 0014 05FB0480 		mla	r0, r5, r4, r8
 183 0018 FFF7FEFF 		bl	memcpy
 184              	.LVL18:
  33:src/low_level/memcpy_s.c ****   for (size_t i = 0; i < count; i++) {
 185              		.loc 1 33 34 discriminator 3 view .LVU40
ARM GAS  /tmp/ccvQIB6i.s 			page 5


 186 001c 0134     		adds	r4, r4, #1
 187              	.LVL19:
 188              	.L15:
  33:src/low_level/memcpy_s.c ****   for (size_t i = 0; i < count; i++) {
 189              		.loc 1 33 24 discriminator 1 view .LVU41
 190 001e B442     		cmp	r4, r6
 191 0020 F6D3     		bcc	.L16
 192              	.LBE2:
  35:src/low_level/memcpy_s.c ****   }
  36:src/low_level/memcpy_s.c **** }...
 193              		.loc 1 36 1 is_stmt 0 view .LVU42
 194 0022 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 195              		.loc 1 36 1 view .LVU43
 196              		.cfi_endproc
 197              	.LFE4:
 199              		.text
 200              	.Letext0:
 201              		.file 2 "/usr/lib/gcc/arm-none-eabi/12.2.1/include/stddef.h"
 202              		.file 3 "src/low_level/memcpy_s.h"
 203              		.file 4 "/usr/include/newlib/string.h"
 204              		.file 5 "<built-in>"
ARM GAS  /tmp/ccvQIB6i.s 			page 6


DEFINED SYMBOLS
                            *ABS*:00000000 memcpy_s.c
     /tmp/ccvQIB6i.s:20     .text.memcpy_s:00000000 $t
     /tmp/ccvQIB6i.s:26     .text.memcpy_s:00000000 memcpy_s
     /tmp/ccvQIB6i.s:141    .text.fill_array:00000000 $t
     /tmp/ccvQIB6i.s:147    .text.fill_array:00000000 fill_array

UNDEFINED SYMBOLS
memcpy
